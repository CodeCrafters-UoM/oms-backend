// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("LOCAL_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  username  String   @unique
  image     String?
  role      Role     @default(SELLER)
  password  String
  admin     Admin?
  seller    Seller?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([username, email])
}

model Admin {
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seller {
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique
  businessName  String
  contactNumber String //@unique
  products      Product[]
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id          String    @id @default(uuid())
  productCode String    @unique
  name        String
  description String
  price       Float
  seller      Seller    @relation(fields: [sellerId], references: [userId])
  sellerId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  order       Order[]
  OrderLink   OrderLink? @relation(fields: [orderLinkId], references: [id])
  orderLinkId String?

  @@index([sellerId])
  @@index([orderLinkId])
}

model Order {
  orderId         Int      @id @default(autoincrement())
  productId       String
  product         Product  @relation(fields: [productId], references: [id])
  quantity        Int
  deliveryAddress String
  dateAndTime     DateTime
  paymentMethod   String
  orderStatus     String
  customerId      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  seller          Seller   @relation(fields: [sellerId], references: [userId])
  sellerId        String
  customer        Customer @relation(fields: [customerId], references: [id])
  description     String

  @@index([productId])
  @@index([sellerId])
  @@index([customerId])
}

model Customer {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  email         String   @unique
  contactNumber String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]
}

model OrderLink {
  id             String       @id @default(uuid())
  name           String
  Product        Product[]
  link           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  questions      QuestionList @relation(fields: [questionListId], references: [id])
  questionListId String
  Question       Question[]

  @@index([questionListId])
}

model QuestionList {
  id        String      @id @default(uuid())
  questions Question[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderLink OrderLink[]
}

model Question {
  id              String        @id @default(uuid())
  question        String
  type            QuestionType
  //selectOptions   SelectOptions @relation(fields: [selectOptionsId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  orderLinkId     String
  orderLink       OrderLink     @relation(fields: [orderLinkId], references: [id])
  QuestionList    QuestionList? @relation(fields: [questionListId], references: [id])
  questionListId  String?
  selectOptionsId String

  @@index([orderLinkId])
  @@index([questionListId])
}

// model SelectOptions {
//   id        String     @id @default(uuid())
//   options   String[]
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt
//   Question  Question[]
// }

enum QuestionType {
  TEXT
  RADIO
  CHECKBOX
  SELECT
  TEXTAREA
}

enum Role {
  ADMIN
  SELLER
}
