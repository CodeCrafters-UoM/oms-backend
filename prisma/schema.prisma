// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("LOCAL_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  username  String   @unique
  image     String?
  role      Role     @default(SELLER)
  password  String
  admin     Admin?
  seller    Seller?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([username, email])
}

model Admin {
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seller {
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique
  businessName  String
  contactNumber String //@unique
  products      Product[]
  orders        Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Product {
  id                 String           @id @default(uuid())
  productCode        String           @unique
  name               String
  description        String
  price              Float
  seller             Seller           @relation(fields: [sellerId], references: [userId])
  sellerId           String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  order              Order[]
  productOrderLink   ProductOrderLink @relation(fields: [productOrderLinkId], references: [id])
  productOrderLinkId String           @unique

  @@index([sellerId])
  @@index([productOrderLinkId])
}

model Order {
  orderId         Int      @id @default(autoincrement())
  productId       String
  product         Product  @relation(fields: [productId], references: [id])
  quantity        Int
  deliveryAddress String
  dateAndTime     DateTime
  paymentMethod   String
  orderStatus     String
  customerId      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  seller          Seller   @relation(fields: [sellerId], references: [userId])
  sellerId        String
  customer        Customer @relation(fields: [customerId], references: [id])
  description     String

  @@index([productId])
  @@index([sellerId])
  @@index([customerId])
}

model Customer {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  email         String   @unique
  contactNumber String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]
}

model ProductOrderLink {
  id             String       @id @default(uuid())
  name           String
  Product        Product?
  link           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Questionaire   Questionaire @relation(fields: [questionaireId], references: [id])
  questionaireId String       @unique

  @@index([questionaireId])
}

model Questionaire {
  id          String            @id @default(uuid())
  questions   Question[]
  OrderLink   ProductOrderLink?
  orderLinkId String
}

model Question {
  id             String        @id @default(uuid())
  content        String
  type           String?
  options        String?
  Questionaire   Questionaire? @relation(fields: [questionaireId], references: [id])
  questionaireId String?

  @@index([questionaireId])
}

model CommonQuestion {
  id      String @id @default(uuid())
  content String
}

// model Questions {
//   id             String       @id @default(uuid())
//   questionaire   Questionaire @relation(fields: [questionaireId], references: [id])
//   questionaireId String
//   question       Question     @relation(fields: [questionId], references: [id])
//   questionId     String
// }

enum Role {
  ADMIN
  SELLER
}
