generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("LOCAL_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  username       String          @unique
  image          String?
  role           Role            @default(SELLER)
  password       String
  active         Boolean         @default(true)
  admin          Admin?
  seller         Seller?
  passwordResets PasswordReset[]
  notifications  Notification[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([username, email])
}

model Admin {
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seller {
  user              User               @relation(fields: [userId], references: [id])
  userId            String             @unique
  businessName      String
  contactNumber     String
  products          Product[]
  orders            Order[]
  productOrderLinks ProductOrderLink[]
  contactUs         ContactUs[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Product {
  id                 String           @id @default(uuid())
  productCode        String           @unique
  name               String
  description        String
  price              Float
  seller             Seller           @relation(fields: [sellerId], references: [userId])
  sellerId           String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  order              Order[]
  productOrderLink   ProductOrderLink @relation(fields: [productOrderLinkId], references: [id])
  productOrderLinkId String           @unique

  @@index([sellerId])
  @@index([productOrderLinkId])
}

model Order {
  orderId           Int            @id @default(autoincrement())
  productId         String
  product           Product        @relation(fields: [productId], references: [id])
  quantity          Int?
  deliveryAddress   String
  paymentMethod     String?
  orderStatus       Status
  seller            Seller         @relation(fields: [sellerId], references: [userId])
  sellerId          String
  customer          Customer       @relation(fields: [customerId], references: [contactNumber])
  customerId        String
  customisedAnswers Json?
  notification      Notification[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([productId])
  @@index([sellerId])
  @@index([customerId])
}

model Customer {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  email         String?  @unique
  contactNumber String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]
}

model ProductOrderLink {
  id                   String   @id @default(uuid())
  name                 String
  product              Product?
  link                 String   @db.VarChar(512)
  seller               Seller   @relation(fields: [sellerId], references: [userId])
  sellerId             String
  selectedQuestions    Json?
  paymentMethodOptions String
  sizeOptions          String?
  colorOptions         String?
  customisedQuestions  Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([sellerId])
}

model ContactUs {
  id            String   @id @default(uuid())
  name          String
  businessName  String
  contactNumber String
  message       String
  seller        Seller   @relation(fields: [sellerId], references: [userId])
  sellerId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([sellerId])
}

model PasswordReset {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  otp       String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  read      Boolean  @default(false)
  order     Order    @relation(fields: [orderId], references: [orderId])
  orderId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([orderId])
}

enum Role {
  ADMIN
  SELLER
}

enum QuestionType {
  TEXT
  RADIO
  CHECKBOX
}

enum Status {
  NEW
  ACCEPT
  REJECT
  DELIVER
  RETURN
}
